services:
  postgres:
    container_name: postgres
    image: postgres:17.5-alpine3.21
    environment:
      POSTGRES_DB: restbank
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      -c wal_level=logical
      -c max_replication_slots=10
      -c max_wal_senders=10
    networks:
      - restbank-net

  kafka:
    container_name: kafka
    image: apache/kafka:3.9.1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9093:9093"
      - "9094:9094"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9094"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka-kraft:29092,EXTERNAL://192.168.0.100:9094
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_DIRS: /kafka-logs
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      CLUSTER_ID: ZDk2MTBhMjkwNzdiNDgwYz
    volumes:
      - ./kafka/kafka-logs:/kafka-logs
    networks:
      - restbank-net

  debezium:
    container_name: debezium
    image: quay.io/debezium/connect:3.2.1
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/connectors" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    ports:
      - "9095:8083"
    environment:
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      STATUS_STORAGE_TOPIC: connect_statuses
      BOOTSTRAP_SERVERS: http://${KAFKA_BOOTSTRAP_SERVER}
    depends_on:
      - kafka
    networks:
      - restbank-net

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.3
    ports:
      - "7080:7080"
      - "7443:7443"
      - "9000:9000"
    environment:
      KC_DB: postgres
      KC_DB_URL: ${KC_DB_JDBC_URL}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_HOSTNAME_URL: http://keycloak:7080
      KC_HOSTNAME_STRICT: false
      KC_PROXY_HEADERS: xforwarded
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_ADMIN_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
      KC_LOG_LEVEL: info
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000; echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost:9000\r\nConnection: close\r\n\r\n' >&3;cat <&3 | grep -q '\"status\": \"UP\"' && exit 0 || exit 1" ]
      interval: 15s
      timeout: 2s
      retries: 4
    command: [
      "start-dev",
      "--http-port", "7080",
      "--https-port", "7443",
      "--import-realm",
      "--verbose",
      "--spi-events-listener=kafka-listener:enabled=true",
      "--spi-events-listener=kafka-listener:bootstrap_servers=kafka:9092",
      "--health-enabled=true",
      "--metrics-enabled=true"
    ]
    env_file:
      - ".env"
    volumes:
      - ./keycloak/import:/opt/keycloak/data/import
      - ./keycloak/providers:/opt/keycloak/providers
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - restbank-net

volumes:
  pgdata:

networks:
  restbank-net:
    driver: bridge