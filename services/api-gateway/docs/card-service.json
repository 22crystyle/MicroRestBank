{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenApi specification - RestBank",
    "description": "OpenApi documentation for RestBank",
    "termsOfService": "Terms of service",
    "contact": {
      "name": "Kryshtal Maxim",
      "url": "https://github.com/22crystyle",
      "email": "shimorowm@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https//opensource.org/licenses/MIT"
    },
    "version": "1.0"
  },
  "servers": [
    {
      "url": "http://172.18.0.10:41129",
      "description": "Generated server url"
    },
    {
      "url": "http://localhost:1024/cards",
      "description": "Card Service ENV"
    }
  ],
  "tags": [
    {
      "name": "Cards",
      "description": "Access and management of user cards"
    }
  ],
  "paths": {
    "/api/v1/cards": {
      "get": {
        "tags": [
          "Cards"
        ],
        "summary": "Get a paginated list of cards",
        "description": "Retrieves a list of cards. Admins can see all cards, while users can only see their own. The card details for admins are masked.",
        "operationId": "getCards",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page index (0-based)",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0,
              "minimum": 0
            },
            "example": 0
          },
          {
            "name": "size",
            "in": "query",
            "description": "Page size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10,
              "minimum": 1
            },
            "example": 10
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of cards.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageCardResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Create a new card for a user",
        "description": "Creates a new bank card for a specified user. This action requires administrator privileges.",
        "operationId": "createCard",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "ID of the user for whom the card is created",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Card created successfully. The response contains the details of the created card.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cards/{id}/block-request": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Request to block a card",
        "description": "Allows a user to submit a request to block their own card.",
        "operationId": "requestCardBlock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the card to block",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Card block request submitted successfully."
          },
          "404": {
            "description": "Card not found."
          },
          "403": {
            "description": "User is not the owner of the card."
          }
        }
      }
    },
    "/api/v1/cards/{id}/block-reject": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Reject a card block request",
        "description": "Allows an administrator to reject a request to block a card.",
        "operationId": "refuseCardBlock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the card to reject block for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The card block request was rejected successfully.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CardBlockRequest"
                }
              }
            }
          },
          "404": {
            "description": "Block request not found or already processed.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CardBlockRequest"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cards/{id}/block-approve": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Approve a card block request",
        "description": "Allows an administrator to approve a request to block a card.",
        "operationId": "approveCardBlock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the card to approve block for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The card block request was approved successfully.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CardBlockRequest"
                }
              }
            }
          },
          "404": {
            "description": "Block request not found or already processed.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CardBlockRequest"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cards/transfer": {
      "post": {
        "tags": [
          "Cards"
        ],
        "summary": "Transfer money between two cards",
        "description": "Allows a user to transfer a specified amount of money from one of their cards to another.",
        "operationId": "transfer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The transfer was completed successfully."
          },
          "400": {
            "description": "Invalid transfer request (e.g., insufficient funds, invalid card numbers)."
          },
          "403": {
            "description": "User does not own one or both of the cards."
          }
        }
      }
    },
    "/api/v1/cards/{id}": {
      "get": {
        "tags": [
          "Cards"
        ],
        "summary": "Get a card by its ID",
        "description": "Retrieves a single card\u0027s details. A user sees the full card details if they are the owner, otherwise the details are masked.",
        "operationId": "getCard",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the card to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The card details.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponse"
                }
              }
            }
          },
          "404": {
            "description": "Card not found.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CardResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CardResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "pan": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          },
          "status": {
            "$ref": "#/components/schemas/CardStatusResponse"
          },
          "balance": {
            "type": "number"
          }
        }
      },
      "CardStatusResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "SUSPENDED"
            ]
          }
        }
      },
      "Card": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "pan": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "expiryDate": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/CardStatus"
          },
          "balance": {
            "type": "number"
          }
        }
      },
      "CardBlockRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "card": {
            "$ref": "#/components/schemas/Card"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "processedAt": {
            "type": "string",
            "format": "date-time"
          },
          "processedBy": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "APPROVED",
              "REJECTED"
            ]
          }
        }
      },
      "CardStatus": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "BLOCKED",
              "EXPIRED"
            ]
          },
          "description": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "SUSPENDED"
            ]
          }
        }
      },
      "TransferRequest": {
        "type": "object",
        "description": "The details of the transfer, including source and destination card numbers and the amount.",
        "properties": {
          "fromCardId": {
            "type": "integer",
            "format": "int64"
          },
          "toCardId": {
            "type": "integer",
            "format": "int64"
          },
          "amount": {
            "type": "number"
          }
        }
      },
      "PageCardResponse": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardResponse"
            }
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "last": {
            "type": "boolean"
          },
          "totalElements": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "paged": {
            "type": "boolean"
          },
          "unpaged": {
            "type": "boolean"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "sorted": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          },
          "unsorted": {
            "type": "boolean"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "description": "JWT auth description",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}