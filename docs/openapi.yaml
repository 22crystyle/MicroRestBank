# Здесь будет OpenAPI описание всех доступных эндпоинтов и моделей данных.
openapi: 3.1.0
info:
  title: REST Bank API
  description: A Java (Spring Boot) backend application for managing bank cards.
  version: 1.0.0
servers:
  - url: 'http://localhost:1024/api/v1'
    description: Development server
paths:
  /accounts:
    get:
      summary: Get paginated list of accounts
      description: Returns a paginated list of account resources, requires ADMIN role.
      parameters:
        - name: page
          in: query
          description: Page index (0-based)
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: Page size (0-based index)
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        "200":
          description: A page of accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfAccountResponse'
    post:
      summary: Create a new account
      description: Receives account data for a new user, saves it to the database, and returns the created object with status code 201 and a Location header.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
            examples:
              createAccountExample:
                summary: Example of request body
                value:
                  username: johndoe
                  password: P@ssw0rd!
                  firstName: John
                  lastName: Doe
                  email: johndoe@example.com
                  phone: "+1-800-555-1234"
                  roleId: 2
      responses:
        "201":
          description: Account successfully created. The response includes a Location header pointing to /accounts/{id}.
          headers:
            Location:
              description: New location for created account
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
  /accounts/{id}:
    get:
      summary: Get account by id
      description: Returns the account with the specified ID. Requires ADMIN role.
      parameters:
        - name: id
          in: path
          description: ID of the account to retrieve
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: Return account by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                accessDenied:
                  summary: Not enough privileges
                  value:
                    status: 403
                    message: Access denied
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                accountNotFound:
                  summary: Account does not exists
                  value:
                    status: 404
                    message: Account with id={id} not found
    delete:
      summary: Delete account by ID
      description: Deletes the account with the specified ID. Requires ADMIN role.
      responses:
        "204":
          description: Account is successfully deleted
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                accountNotFound:
                  summary: Account does not exists
                  value:
                    status: 404
                    message: Account with id={id} not found
  /cards:
    get:
      summary: Get paginated list of cards
      description: Returns a paginated list of card resources. Requires ADMIN.
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        "200":
          description: A page of cards.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfCardResponse'
    post:
      summary: Create card for user by id
      description: Creates a new card for the specified user. PAN and expiration year/month are generated automatically. By default, the status is 'ACTIVE'.
      parameters:
        - name: userId
          description: ID of the user for whom the card is created
          required: true
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
      responses:
        "201":
          description: Card successfully created
          headers:
            Location:
              description: New location for created card
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
  /cards/{cardId}:
    get:
      summary: Get a card by ID
      description: Returns the card with the specified ID.
      parameters:
        - name: cardId
          in: path
          schema:
            type: integer
            default: 1
            minimum: 1
          required: true
      responses:
        "200":
          description: Return card response by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
  /cards/{cardId}/block-request:
    post:
      summary: Sends a block request for the card by its owner.
      description: Sends a request to block the specified card. Only the card owner can initiate this request.
      parameters:
        - name: cardId
          in: path
          schema:
            type: integer
            format: int64
            minimum: 1
          required: true
      responses:
        "200":
          description: Request submitted successfully
  /cards/{cardId}/block-approve:
    post:
      summary: Approve a card block request (admin)
      description: Approves a pending block request for the specified card. Requires ADMIN role.
      parameters:
        - name: cardId
          in: path
          schema:
            type: integer
            format: int64
            minimum: 1
          required: true
      responses:
        "200":
          description: Admin approve card block request
  /cards/{cardId}/block-reject:
    post:
      summary: Reject a card block request (admin)
      description: Rejects a pending block request for the specified card. Requires ADMIN role.
      parameters:
        - name: cardId
          in: path
          schema:
            type: integer
            format: int64
            minimum: 1
          required: true
      responses:
        "200":
          description: Admin reject card block request
  /cards/transfer:
    post:
      summary: Transfer money between cards
      description: Transfers the specified amount from the source card to the destination card. Requires sufficient balance.
      parameters:
        - name: fromCard
          description: ID of the source card
          in: query
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: toCard
          description: ID of the destination card
          in: query
          schema:
            type: integer
            format: int64
            minimum: 1
        - name: amount
          description: Amount to transfer (must be ≥ 1)
          in: query
          schema:
            type: number
            format: double
            minimum: 1
      responses:
        "200":
          description: Transfer completed successfully # TODO: нужен TransferResponse
  /accounts/{cardId}/cards:
    get:
      summary: Get all cards for an account
      description: Returns a list of cards associated with the specified account ID.
      parameters:
        - name: cardId
          in: path
          description: id of account
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Return cards of account
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardResponse'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    Error:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
      required:
        - status
        - message
    AccountRequest:
      type: object
      properties:
        username:
          type: string
          example: "johndoe"
        password:
          type: string
          example: "P@ssw0rd!"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "johndoe@example.com"
        phone:
          type: string
          example: "+1-800-555-1234"
        roleId:
          type: integer
          example: 2
      required:
        - username
        - password
        - firstName
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: USER
        description:
          type: string
          example: User role
      required:
        - id
        - name
        - description
    AccountResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: johndoe
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: johndoe@example.com
        phone:
          type: string
          example: "+1-800-555-1234"
        role:
          $ref: '#/components/schemas/Role'
      required:
        - id
        - username
        - firstName
        - lastName
        - email
        - phone
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int32
          example: 10
        number:
          type: integer
          format: int32
          example: 0
        totalElements:
          type: integer
          format: int64
          example: 1
        totalPages:
          type: integer
          format: int32
          example: 1
      required:
        - size
        - number
        - totalElements
        - totalPages
    PageOfAccountResponse: # TODO: чтобы ответ страницы соответствовал Page из Spring
      description: Paginated list of account responses.
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AccountResponse'
        page:
          $ref: '#/components/schemas/PageMetadata'
    CardStatusResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: Card is active
        name:
          type: string
          example: ACTIVE
      required:
        - id
        - description
        - name
    CardResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        cardNumber: # TODO: упоминание что для не владельцев номер замаскирован
          type: string
          example: "1234657890123456"
        owner:
          $ref: '#/components/schemas/AccountResponse' # TODO: подумать про использовании ownerId вместо всего объекта
        status:
          $ref: '#/components/schemas/CardStatusResponse'
        balance:
          type: number
          format: double
          example: 2500.75
      required:
        - id
        - cardNumber
        - owner
        - status
        - balance
    PageOfCardResponse:
      description: Returns a paginated list of card responses, requires ADMIN role
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardResponse'
        page:
            $ref: '#/components/schemas/PageMetadata'