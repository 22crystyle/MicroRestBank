# Здесь будет OpenAPI описание всех доступных эндпоинтов и моделей данных.
openapi: 3.1.0
info:
  title: REST Bank API
  description: Backend-приложение на Java (Spring Boot) для управления банковскими картами
  version: 1.0.0
servers:
  - url: 'http://localhost:1024/api/v1'
    description: Development server
paths:
  /accounts:
    get:
      summary: Get paginated list of accounts
      description: Returns a paginated list of account resources. Requires ADMIN role.
      parameters:
        - name: page
          in: query
          description: Page index (0-based)
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        "200":
          description: A page of accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfAccountResponse'
    post:
      summary: Create a new account
      description: Get account data of new user, save in db and return created object with code 201 + location header
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountRequest'
            examples:
              createAccountExample:
                summary: Example of request body
                value:
                  username: johndoe
                  password: P@ssw0rd!
                  firstName: John
                  lastName: Doe
                  email: johndoe@example.com
                  phone: "+1-800-555-1234"
                  role_id: 2
      responses:
        "201":
          description: Account is successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
  /accounts/{id}:
    get:
      summary: Get account by id
      description: Returns account response by user id. Requires ADMIN role.
      parameters:
        - name: id
          in: path
          description: ID of the account to retrieve
          required: true
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: Return account by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        "403":
          description: Access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                accessDenied:
                  summary: Not enough privileges
                  value:
                    status: 403
                    message: Access denied
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                accountNotFound:
                  summary: Account does not exists
                  value:
                    status: 404
                    message: Account with id={id} not found
    delete:
      responses:
        "204":
          description: Account is successfully deleted
        "404":
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                accountNotFound:
                  summary: Account does not exists
                  value:
                    status: 404
                    message: Account with id={id} not found
  /cards:
    get:
      summary: Get page of cards
      description: Returns a paginated list of cards
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        "200":
          description: A page of accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfCardResponse'
    post:
      summary: Create card for user by id
      description: Create card for account, pan & year/mont is generated automatically. By default status is 'ACTIVE'
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
      responses:
        "201":
          description: Card is created
  /cards/{id}:
    get:
      summary: Get Card by id
      description: Get Card Response by id
      parameters:
        - name: cardId
          in: path
          schema:
            type: integer
            default: 1
            minimum: 1
      responses:
        "200":
          description: Return card response by id
  /cards/{id}/block-request:
    post:
  /cards/{id}/block-approve:
    post:
  /cards/{id}/block-reject:
    post:
  /cards/transfer:
    post:
  /accounts/{id}/cards:
    get:
      summary: Get account cards
      description: Get list of account cards
      parameters:
        - name: id
          in: path
          description: id of account
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Return cards of account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    Error:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
      required:
        - status
        - message
    AccountRequest:
      type: object
      properties:
        username:
          type: string
          example: "johndoe"
        password:
          type: string
          example: "P@ssw0rd!"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "johndoe@example.com"
        phone:
          type: string
          example: "+1-800-555-1234"
        role_id:
          type: integer
          example: 2
      required:
        - username
        - password
        - firstName
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: USER
        description:
          type: string
          example: User role
      required:
        - id
        - name
        - description
    AccountResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: johndoe
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: johndoe@example.com
        phone:
          type: string
          example: "+1-800-555-1234"
        role:
          $ref: '#/components/schemas/Role'
      required:
        - id
        - username
        - firstName
        - lastName
        - email
        - phone
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int32
          example: 10
        number:
          type: integer
          format: int32
          example: 0
        totalElements:
          type: integer
          format: int64
          example: 1
        totalPages:
          type: integer
          format: int32
          example: 1
      required:
        - size
        - number
        - totalElements
        - totalPages
    PageOfAccountResponse: # TODO: чтобы ответ страницы соответствовал Page из Spring
      description: Paginated list of account response
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/AccountResponse'
        page:
          $ref: '#/components/schemas/PageMetadata'
    CardStatusResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: Card is active
        name:
          type: string
          example: ACTIVE
      required:
        - id
        - description
        - name
    CardResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        cardNumber:
          type: string
          example: "1234657890123456"
        owner:
          $ref: '#/components/schemas/AccountResponse'
        status:
          $ref: '#/components/schemas/CardStatusResponse'
        balance:
          type: number
          format: double
          example: 2500.75
      required:
        - id
        - cardNumber
        - owner
        - status
        - balance
    PageOfCardResponse:
      description: Paginated list of card response
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardResponse'
        page:
            $ref: '#/components/schemas/PageMetadata'