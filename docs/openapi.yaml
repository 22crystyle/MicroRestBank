openapi: 3.1.0
info:
  title: Bank_REST
  description: backend-приложение на Java (Spring Boot) для управления банковскими
    картами
  contact:
    name: API support
    url: https://github.com/22crystyle
    email: shimorowm@gmail.com
  version: 1.0.0
servers:
- url: http://localhost:1024
  description: Local server
tags:
- name: Accounts
  description: Доступ и управление аккаунтами. Нужна роль админа
- name: Cards
  description: Доступ и управление картами аккаунта
paths:
  /api/v1/cards:
    get:
      tags:
      - Cards
      summary: Get paginated list of cards
      description: Returns a paginated list of card resources. Requires ADMIN role.
      operationId: getCards
      parameters:
      - name: page
        in: query
        description: Page index (1-based)
        required: false
        schema:
          type: integer
          format: int32
          default: 1
          minimum: 1
        example: 1
      - name: size
        in: query
        description: Page size
        required: false
        schema:
          type: integer
          format: int32
          default: 10
          minimum: 1
        example: 10
      responses:
        "200":
          description: A page of cards
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageCardResponse"
        "400":
          description: Invalid page or size parameters
        "401":
          description: Unauthorized
        "403":
          description: Access Denied
        "500":
          description: Internal Server Error
    post:
      tags:
      - Cards
      summary: Create a new card
      description: Creates a new card for the specified user ID. Requires ADMIN role.
      operationId: createCard
      parameters:
      - name: userId
        in: query
        description: ID of the user for whom the card is created
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "201":
          description: Card successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardResponse"
        "400":
          description: Invalid user ID
        "401":
          description: Unauthorized
        "403":
          description: Access Denied
        "404":
          description: User not found
        "500":
          description: Internal Server Error
  /api/v1/cards/{id}/block-request:
    post:
      tags:
      - Cards
      summary: Request card block
      description: Submits a request to block the specified card. Requires USER role.
      operationId: requestCardBlock
      parameters:
      - name: id
        in: path
        description: ID of the card to block
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Block request submitted
        "400":
          description: Invalid card ID
        "401":
          description: Unauthorized
        "403":
          description: Access Denied
        "404":
          description: Card not found
        "500":
          description: Internal Server Error
  /api/v1/cards/{id}/block-reject:
    post:
      tags:
      - Cards
      summary: Reject card block request
      description: Rejects a block request for the specified card. Requires ADMIN
        role.
      operationId: refuseCardBlock
      parameters:
      - name: id
        in: path
        description: ID of the card to reject block for
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Block request rejected
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardBlockRequest"
        "400":
          description: Invalid card ID
        "401":
          description: Unauthorized
        "403":
          description: Access Denied
        "404":
          description: Card or block request not found
        "500":
          description: Internal Server Error
  /api/v1/cards/{id}/block-approve:
    post:
      tags:
      - Cards
      summary: Approve card block request
      description: Approves a block request for the specified card. Requires ADMIN
        role.
      operationId: approveCardBlock
      parameters:
      - name: id
        in: path
        description: ID of the card to approve block for
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Block request approved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardBlockRequest"
        "400":
          description: Invalid card ID
        "401":
          description: Unauthorized
        "403":
          description: Access Denied
        "404":
          description: Card or block request not found
        "500":
          description: Internal Server Error
  /api/v1/cards/transfer:
    post:
      tags:
      - Cards
      summary: Transfer money between cards
      description: Transfers the specified amount from one card to another. Both cards
        must belong to the authenticated user. Requires USER role.
      operationId: transfer
      parameters:
      - name: fromCard
        in: query
        description: Card number to transfer from
        required: true
        schema:
          type: string
      - name: toCard
        in: query
        description: Card number to transfer to
        required: true
        schema:
          type: string
      - name: amount
        in: query
        description: Amount to transfer
        required: true
        schema:
          type: number
      responses:
        "200":
          description: Transfer successful
        "400":
          description: Invalid card numbers or amount
        "401":
          description: Unauthorized
        "403":
          description: Access Denied
        "404":
          description: One or both cards not found
        "422":
          description: Insufficient funds or invalid transfer
        "500":
          description: Internal Server Error
  /api/v1/accounts:
    get:
      tags:
      - Accounts
      summary: Get paginated list of accounts
      description: "Returns a paginated list of account resources, requires ADMIN\
        \ role."
      operationId: getAccounts
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
          minimum: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
          maximum: 100
      responses:
        "200":
          description: A page of accounts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageAccountResponse"
        "400":
          description: The parameters do not match the validation
    post:
      tags:
      - Accounts
      summary: Create new account
      description: "Receives account data for a new user, saves it to the database,\
        \ and returns the created object with status code 201 and a Location header."
      operationId: createAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountRequest"
        required: true
      responses:
        "201":
          description: Account successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
        "401":
          description: Unauthorized
        "403":
          description: Access Denied
        "409":
          description: Conflict. User with unique keys already exists
  /api/v1/cards/{id}:
    get:
      tags:
      - Cards
      summary: Get card by ID
      description: "Returns card details for the specified card ID. Full details are\
        \ returned if the authenticated user is the owner; otherwise, masked details\
        \ are provided."
      operationId: getCard
      parameters:
      - name: id
        in: path
        description: ID of the card to retrieve
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Card found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CardResponse"
        "400":
          description: Invalid card ID
        "401":
          description: Unauthorized
        "403":
          description: Access Denied
        "404":
          description: Card not found
        "500":
          description: Internal Server Error
  /api/v1/accounts/{id}:
    get:
      tags:
      - Accounts
      summary: Get account by ID
      description: Returns account details for the specified account ID
      operationId: getAccountById
      parameters:
      - name: id
        in: path
        description: ID of the account to retrieve
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Account found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
        "403":
          description: Access Denied
        "404":
          description: Account not found
    delete:
      tags:
      - Accounts
      summary: Delete account by id
      description: Deletes the account with the specified ID. Requires ADMIN role.
      operationId: deleteAccount
      parameters:
      - name: id
        in: path
        description: ID of the account to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Account is successfully deleted
        "404":
          description: Account not found
  /api/v1/accounts/{id}/cards:
    get:
      tags:
      - Accounts
      summary: Get all cards for an account
      description: Returns a list of cards associated with the specified account ID.
      operationId: getAccountCardsByUserId
      parameters:
      - name: id
        in: path
        description: ID of the account
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: List of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CardResponse"
components:
  schemas:
    AccountResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        role:
          $ref: "#/components/schemas/Role"
    CardResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cardNumber:
          type: string
        owner:
          $ref: "#/components/schemas/AccountResponse"
        status:
          $ref: "#/components/schemas/CardStatusResponse"
        balance:
          type: number
    CardStatusResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        description:
          type: string
        name:
          type: string
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          minLength: 1
        description:
          type: string
    Account:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        bank_cards:
          type: array
          items:
            $ref: "#/components/schemas/Card"
        role:
          $ref: "#/components/schemas/Role"
    Card:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cardNumber:
          type: string
        owner:
          $ref: "#/components/schemas/Account"
        expiryDate:
          type: string
          example: 2025-03
        status:
          $ref: "#/components/schemas/CardStatus"
        balance:
          type: number
    CardBlockRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        card:
          $ref: "#/components/schemas/Card"
        createdAt:
          type: string
          format: date-time
        processedAt:
          type: string
          format: date-time
        processedBy:
          type: integer
          format: int64
        status:
          type: string
          enum:
          - PENDING
          - APPROVED
          - REJECTED
    CardStatus:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        cardStatusType:
          type: string
          enum:
          - ACTIVE
          - BLOCKED
          - EXPIRED
    AccountRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        roleId:
          type: integer
          format: int32
    PageCardResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/CardResponse"
        pageable:
          $ref: "#/components/schemas/PageableObject"
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        offset:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        sorted:
          type: boolean
        empty:
          type: boolean
        unsorted:
          type: boolean
    PageAccountResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/AccountResponse"
        pageable:
          $ref: "#/components/schemas/PageableObject"
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
  securitySchemes:
    Basic:
      type: http
      scheme: basic
